// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2025-05-29 20:44:19.79057042 +0300 MSK m=+3.586233536

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "app для распределённых систем.",
        "title": "app by artisan",
        "contact": {
            "name": "Artisan",
            "url": "http://www.by_artisan.io/support",
            "email": "by@artisan.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.1"
    },
    "host": "127.0.0.1:8080",
    "basePath": "/",
    "paths": {
        "/api/task/": {
            "post": {
                "description": "Метод позволяет записать одну задачу на пользователя",
                "summary": "Создать задачу",
                "parameters": [
                    {
                        "description": "Задача",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/api/task/sim/{count}": {
            "post": {
                "description": "Метод позволяет симулировать создание и удаление задач определённое количество раз",
                "summary": "Симулировать активность",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Количество задач",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/api/task/{id}": {
            "delete": {
                "description": "Метод позволяет удалить одну задачу",
                "summary": "Удалить задачу",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Задача",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/api/user/": {
            "get": {
                "description": "Метод позволяет получить всех пользователей",
                "summary": "Получить пользователей по id",
                "responses": {
                    "200": {}
                }
            }
        }
    },
    "definitions": {
        "model.Task": {
            "type": "object",
            "properties": {
                "taskId": {
                    "type": "integer"
                },
                "taskName": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
